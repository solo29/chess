{"version":3,"sources":["knight.svg","hooks.js","TravelingKnight.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStatex","data","temp","useState","e","persist","inputName","target","getAttribute","undefined","console","error","state","value","generateBoard","size","visited","arr","i","j","push","_get","board","x","y","TravelingKnight","pos","setPos","visitables","setVisitables","setVisited","setBoard","count","setCount","useEffect","checkAndMarkMoves","move","newPos","obj","isVisited","newBoard","gridStyle","display","gridTemplateColumns","cellStyle","border","width","height","style","map","row","key","cell","onClick","backgroundColor","type","currPos","src","knight","alt","length","randomIndex","Math","floor","random","alert","enableAutopilot","App","started","setStarted","sizeBind","xBind","yBind","className","min","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2a446a0f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/knight.d39f1d02.svg\";","import { useState } from \"react\";\nexport const useStatex = (data) => {\n  const temp = useState(data);\n\n  const binding = (e) => {\n    e.persist();\n    const inputName = e.target.getAttribute(\"name\");\n\n    if (typeof data == \"object\") {\n      if (data[inputName] === undefined) {\n        console.error(\"jsx name property should match state property\");\n      } else {\n        temp[1]((state) => {\n          return { ...state, [inputName]: e.target.value };\n        });\n      }\n    } else {\n      temp[1](e.target.value);\n    }\n  };\n  return [...temp, binding];\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from \"react\";\nimport knight from \"./knight.svg\";\n\nconst generateBoard = (size, visited = {}) => {\n  let arr = [];\n  //initial all false\n  for (let i = 0; i < size; i++) {\n    let temp = [];\n    for (let j = 0; j < size; j++) {\n      if (visited[`${i}_${j}`]) {\n        temp.push(\"visited\");\n      } else {\n        temp.push(\"visitable\");\n      }\n    }\n    arr.push(temp);\n  }\n  return arr;\n};\n\nconst _get = (board, x, y) => {\n  return board[x] && board[x][y];\n};\n\nconst TravelingKnight = ({ x, y, size }) => {\n  const [pos, setPos] = useState({ x: +x, y: +y });\n\n  const [visitables, setVisitables] = useState([]);\n  const [visited, setVisited] = useState({});\n  const [board, setBoard] = useState(generateBoard(size, visited));\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    checkAndMarkMoves();\n  }, [pos]);\n\n  const move = (newPos) => {\n    if (board[newPos.x][newPos.y] !== \"canVisit\") return;\n    setPos({ x: newPos.x, y: newPos.y });\n    setVisited((obj) => {\n      return { ...obj, [`${pos.x}_${pos.y}`]: true };\n    });\n    setCount(count + 1);\n  };\n\n  const isVisited = (x, y) => {\n    return visited[`${x}_${y}`];\n  };\n  const enableAutopilot = () => {\n    if (visitables.length > 0) {\n      const randomIndex = Math.floor(Math.random() * visitables.length);\n      move(visitables[randomIndex]);\n    } else {\n      alert(\"Oops No more moves :(\");\n    }\n  };\n\n  const checkAndMarkMoves = () => {\n    const newBoard = generateBoard(size, visited);\n    //right check\n    let visitables = [];\n    if (_get(newBoard, pos.x + 2, pos.y + 1) && !isVisited(pos.x + 2, pos.y + 1)) {\n      newBoard[pos.x + 2][pos.y + 1] = \"canVisit\";\n      visitables.push({ x: pos.x + 2, y: pos.y + 1 });\n    }\n    if (_get(newBoard, pos.x + 2, pos.y - 1) && !isVisited(pos.x + 2, pos.y - 1)) {\n      newBoard[pos.x + 2][pos.y - 1] = \"canVisit\";\n      visitables.push({ x: pos.x + 2, y: pos.y - 1 });\n    }\n    //left\n    if (_get(newBoard, pos.x - 2, pos.y + 1) && !isVisited(pos.x - 2, pos.y + 1)) {\n      newBoard[pos.x - 2][pos.y + 1] = \"canVisit\";\n      visitables.push({ x: pos.x - 2, y: pos.y + 1 });\n    }\n    if (_get(newBoard, pos.x - 2, pos.y - 1) && !isVisited(pos.x - 2, pos.y - 1)) {\n      newBoard[pos.x - 2][pos.y - 1] = \"canVisit\";\n      visitables.push({ x: pos.x - 2, y: pos.y - 1 });\n    }\n    //bottom\n    if (_get(newBoard, pos.x - 1, pos.y + 2) && !isVisited(pos.x - 1, pos.y + 2)) {\n      newBoard[pos.x - 1][pos.y + 2] = \"canVisit\";\n      visitables.push({ x: pos.x - 1, y: pos.y + 2 });\n    }\n    if (_get(newBoard, pos.x + 1, pos.y + 2) && !isVisited(pos.x + 1, pos.y + 2)) {\n      newBoard[pos.x + 1][pos.y + 2] = \"canVisit\";\n      visitables.push({ x: pos.x + 1, y: pos.y + 2 });\n    }\n    //top\n    if (_get(newBoard, pos.x - 1, pos.y - 2) && !isVisited(pos.x - 1, pos.y - 2)) {\n      newBoard[pos.x - 1][pos.y - 2] = \"canVisit\";\n      visitables.push({ x: pos.x - 1, y: pos.y - 2 });\n    }\n    if (_get(newBoard, pos.x + 1, pos.y - 2) && !isVisited(pos.x + 1, pos.y - 2)) {\n      newBoard[pos.x + 1][pos.y - 2] = \"canVisit\";\n      visitables.push({ x: pos.x + 1, y: pos.y - 2 });\n    }\n    setVisitables(visitables);\n    setBoard(newBoard);\n  };\n\n  const isCurrent = (currPos) => {\n    return currPos.x === pos.x && currPos.y === pos.y;\n  };\n\n  const getColor = (type) => {\n    if (type === \"visited\") return \"#e74c3c\";\n    if (type === \"canVisit\") return \"#2ecc71\";\n\n    return \"#2c3e50\";\n  };\n\n  const gridStyle = {\n    display: \"grid\",\n    gridTemplateColumns: `repeat(${size}, 1fr)`,\n    // background-color: #2196F3;\n  };\n  const cellStyle = {\n    border: \"1px solid black\",\n    width: \"40px\",\n    height: \"40px\",\n  };\n\n  const buildBoard = () => {\n    return (\n      <div style={gridStyle}>\n        {board.map((row, x) => (\n          <div key={\"x\" + x}>\n            {row.map((cell, y) => (\n              <div onClick={() => move({ x, y })} key={\"y\" + y} style={{ ...cellStyle, backgroundColor: getColor(cell) }}>\n                {isCurrent({ x, y }) && <img src={knight} alt=\"knight\" />}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n  };\n  return (\n    <div>\n      <p>Click on green tiles to move</p>\n      {buildBoard()}\n      <div>Moves: {count}</div>\n      <button onClick={() => enableAutopilot()}>Autopilot</button>\n    </div>\n  );\n};\n\nexport default TravelingKnight;\n","/* eslint-disable no-unused-vars */\nimport React from \"react\";\nimport { useStatex } from \"./hooks\";\nimport \"./App.scss\";\nimport knight from \"./knight.svg\";\nimport TravelingKnight from \"./TravelingKnight\";\nfunction App() {\n  const [started, setStarted] = useStatex(false);\n  const [size, setSize, sizeBind] = useStatex(8);\n  const [x, setX, xBind] = useStatex(3);\n  const [y, setY, yBind] = useStatex(3);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={knight} className=\"App-logo\" alt=\"logo\" />\n        {!started ? (\n          <div>\n            <p>Board Size</p>\n            <input min={6} value={size} onChange={sizeBind} type=\"number\" />\n            <p>X coordinate</p>\n            <input min={0} value={x} onChange={xBind} type=\"number\" />\n            <p>Y coordinate</p>\n            <input min={0} value={y} onChange={yBind} type=\"number\" />\n            <br></br>\n            <button onClick={() => setStarted(true)}>Start</button>\n          </div>\n        ) : (\n          <TravelingKnight size={size} x={x} y={y} />\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}